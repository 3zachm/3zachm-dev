generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model history {
  time DateTime @unique(map: "time") @default(now()) @db.DateTime(0)
  yep  Int?
  cock Int?
}

model logs {
  time    DateTime @default(now()) @db.DateTime(0)
  id      Int?
  user    String?  @db.VarChar(32)
  message String?  @db.VarChar(512)
  msg_id  Int      @id @default(autoincrement()) @db.MediumInt
  isSub     Boolean  @default(false)
  isMod   Boolean  @default(false)
  isTurbo Boolean  @default(false)
  badges  String?  @db.VarChar(128)
  color   String?  @default("#FFFFFF")  @db.VarChar(9)
}

model users {
  id   String? @unique(map: "id") @db.VarChar(32)
  yep  Int?
  cock Int?
  uid  Int     @id @default(autoincrement())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
